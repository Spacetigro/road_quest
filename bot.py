import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils import executor

TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN.")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

quiz_data = [
    {
        "question": "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±–æ—Ç–µ?",
        "options": ["Python", "Java", "C++", "Pascal"],
        "answer": "Python"
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –±–∏—Ç –≤ 1 –±–∞–π—Ç–µ?",
        "options": ["4", "8", "16", "32"],
        "answer": "8"
    },
    {
        "question": "–ö—Ç–æ —Å–æ–∑–¥–∞–ª Telegram?",
        "options": ["–ò–ª–æ–Ω –ú–∞—Å–∫", "–ü–∞–≤–µ–ª –î—É—Ä–æ–≤", "–ë–∏–ª–ª –ì–µ–π—Ç—Å", "–ú–∞—Ä–∫ –¶—É–∫–µ—Ä–±–µ—Ä–≥"],
        "answer": "–ü–∞–≤–µ–ª –î—É—Ä–æ–≤"
    }
]

user_scores = {}
user_progress = {}
user_questions = {}

@dp.message_handler(commands=['start'])
async def start_quiz(message: types.Message):
    user_scores[message.from_user.id] = 0
    user_progress[message.from_user.id] = 0
    shuffled = quiz_data.copy()
    random.shuffle(shuffled)
    user_questions[message.from_user.id] = shuffled
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏ /start.
–ü–æ–º–æ—â—å: /help")
    await send_question(message.from_user.id)

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer("–≠—Ç–æ –±–æ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω.
–ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/help ‚Äî –ø–æ–º–æ—â—å")

async def send_question(user_id):
    idx = user_progress[user_id]
    questions = user_questions[user_id]
    if idx < len(questions):
        q = questions[idx]
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(*q["options"])
        await bot.send_message(user_id, f"–í–æ–ø—Ä–æ—Å {idx+1}:
{q['question']}", reply_markup=kb)
    else:
        score = user_scores[user_id]
        await bot.send_message(user_id, f"–ö–≤–∏–∑ –æ–∫–æ–Ω—á–µ–Ω! üéâ
–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(quiz_data)}", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler()
async def check_answer(message: types.Message):
    user_id = message.from_user.id
    idx = user_progress.get(user_id, 0)

    if user_id not in user_questions or idx >= len(user_questions[user_id]):
        await message.answer("–ö–≤–∏–∑ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    q = user_questions[user_id][idx]
    if message.text == q["answer"]:
        user_scores[user_id] += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['answer']}")
    user_progress[user_id] += 1
    await send_question(user_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
