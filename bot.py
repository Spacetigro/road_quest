import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils import executor

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN.")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –ë–î–î
quiz_data = [
    {
        "question": "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –ø–µ—à–µ—Ö–æ–¥–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ?",
        "options": ["–ë–µ–∂–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ—Ä–æ–≥—É", "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—à–∏–Ω—ã", "–°—Ç–æ—è—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω"],
        "answer": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ—Ä–æ–≥—É"
    },
    {
        "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞?",
        "options": ["–°—Ç–æ–ø", "–ú–æ–∂–Ω–æ –∏–¥—Ç–∏", "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è", "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å"],
        "answer": "–°—Ç–æ–ø"
    },
    {
        "question": "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–≤—ã—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–µ—à–µ—Ö–æ–¥–∞ –Ω–æ—á—å—é?",
        "options": ["–§–æ–Ω–∞—Ä–∏–∫", "–°–≤–µ—Ç–æ–æ—Ç—Ä–∞–∂–∞—é—â–∏–π –∂–∏–ª–µ—Ç", "–¢–µ–º–Ω–∞—è –æ–¥–µ–∂–¥–∞", "–®–ª—è–ø–∞"],
        "answer": "–°–≤–µ—Ç–æ–æ—Ç—Ä–∞–∂–∞—é—â–∏–π –∂–∏–ª–µ—Ç"
    },
    {
        "question": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ —É—Å—Ç—É–ø–∞–µ—Ç –¥–æ—Ä–æ–≥—É –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–µ?",
        "options": ["–ü—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –∂–¥–∞—Ç—å", "–ö—Ä–∏—á–∞—Ç—å –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è", "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞"],
        "answer": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –∂–¥–∞—Ç—å"
    }
]

user_scores = {}
user_progress = {}

@dp.message_handler(commands=['start'])
async def start_quiz(message: types.Message):
    user_scores[message.from_user.id] = 0
    user_progress[message.from_user.id] = 0
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω—ë–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è.")
    await send_question(message.from_user.id)

async def send_question(user_id):
    idx = user_progress[user_id]
    if idx < len(quiz_data):
        q = quiz_data[idx]
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(*q["options"])
        await bot.send_message(user_id, f"–í–æ–ø—Ä–æ—Å {idx+1}:\n{q['question']}", reply_markup=kb)
    else:
        score = user_scores[user_id]
        await bot.send_message(user_id, f"–ö–≤–∏–∑ –æ–∫–æ–Ω—á–µ–Ω! üéâ\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(quiz_data)}", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler()
async def check_answer(message: types.Message):
    user_id = message.from_user.id
    idx = user_progress.get(user_id, 0)

    if idx >= len(quiz_data):
        await message.answer("–ö–≤–∏–∑ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    q = quiz_data[idx]
    if message.text == q["answer"]:
        user_scores[user_id] += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['answer']}")
    user_progress[user_id] += 1
    await send_question(user_id)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
